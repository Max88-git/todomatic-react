{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","className","htmlFor","type","placeholder","id","autoComplete","value","onChange","target","FilterButton","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","editedTaskList","taskList","filterList","tasksNoun","length","headingText","listHeadingRef","prevTaskLength","newTask","nanoid","tabIndex","role","ReactDOM","render","document","getElementById"],"mappings":"oNAsCeA,MApCf,SAAcC,GACZ,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAWA,OACE,uBAAMC,SANR,SAAsBC,GACpBA,EAAEC,iBACFN,EAAMO,QAAQL,GACdC,EAAQ,KAGR,UACE,oBAAIK,UAAU,gBAAd,SACE,uBAAOC,QAAQ,iBAAiBD,UAAU,YAA1C,sCAIF,uBACEE,KAAK,OACLC,YAAY,sBACZC,GAAG,iBACHJ,UAAU,kBACVN,KAAK,OACLW,aAAa,MACbC,MAAOZ,EACPa,SAxBN,SAAsBV,GACpBF,EAAQE,EAAEW,OAAOF,UAyBf,wBAAQJ,KAAK,SAASF,UAAU,2BAAhC,qBCdSS,MAff,SAAsBjB,GACpB,OACE,yBACEU,KAAK,SACLF,UAAU,iBACV,eAAcR,EAAMkB,UACpBC,QAAS,kBAAMnB,EAAMoB,UAAUpB,EAAME,OAJvC,UAME,sBAAMM,UAAU,kBAAhB,mBACA,+BAAOR,EAAME,OACb,sBAAMM,UAAU,kBAAhB,wBCFS,SAASa,EAAKrB,GAC3B,MAAgCC,oBAAS,GAAzC,mBAAOqB,EAAP,KAAkBC,EAAlB,KACA,EAA8BtB,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgBC,EAAhB,KAEMC,EAAeC,iBAAO,MACtBC,EAAgBD,iBAAO,MAEvBE,EAfR,SAAqBf,GACnB,IAAMgB,EAAMH,mBAIZ,OAHAI,qBAAU,WACRD,EAAIE,QAAUlB,KAETgB,EAAIE,QAUQC,CAAYX,GAa/B,IAAMY,EACJ,uBAAM1B,UAAU,cAAcJ,SARhC,SAAsBC,GACpBA,EAAEC,iBACFN,EAAMmC,SAASnC,EAAMY,GAAIY,GACzBC,EAAW,IACXF,GAAW,IAIX,UACE,sBAAKf,UAAU,aAAf,UACE,wBAAOA,UAAU,aAAaC,QAAST,EAAMY,GAA7C,0BACgBZ,EAAME,QAEtB,uBACEU,GAAIZ,EAAMY,GACVJ,UAAU,YACVE,KAAK,OACLI,MAAOU,EACPT,SAtBR,SAAsBV,GACpBoB,EAAWpB,EAAEW,OAAOF,QAsBdgB,IAAKJ,OAGT,sBAAKlB,UAAU,YAAf,UACE,yBACEE,KAAK,SACLF,UAAU,kBACVW,QAAS,kBAAMI,GAAW,IAH5B,mBAME,uBAAMf,UAAU,kBAAhB,sBAA4CR,EAAME,WAEpD,yBAAQQ,KAAK,SAASF,UAAU,6BAAhC,iBAEE,uBAAMA,UAAU,kBAAhB,0BAAgDR,EAAME,iBAKxDkC,EACJ,sBAAK5B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACI,uBACEI,GAAIZ,EAAMY,GACVF,KAAK,WACL2B,eAAgBrC,EAAMsC,UACtBvB,SAAU,kBAAMf,EAAMuC,oBAAoBvC,EAAMY,OAElD,uBAAOJ,UAAU,aAAaC,QAAST,EAAMY,GAA7C,SACGZ,EAAME,UAGX,sBAAKM,UAAU,YAAf,UACE,yBACEE,KAAK,SACLF,UAAU,MACVW,QAAS,kBAAMI,GAAW,IAC1BO,IAAKF,EAJP,kBAMO,sBAAMpB,UAAU,kBAAhB,SAAmCR,EAAME,UAEhD,yBACEQ,KAAK,SACLF,UAAU,kBACVW,QAAS,kBAAMnB,EAAMwC,WAAWxC,EAAMY,KAHxC,oBAKS,sBAAMJ,UAAU,kBAAhB,SAAmCR,EAAME,gBAc1D,OARA6B,qBAAU,WACJT,EACFI,EAAaM,QAAQS,QAErBb,EAAcI,QAAQS,UAEvB,CAACZ,EAAYP,IAET,oBAAId,UAAU,OAAd,SAAsBc,EAAYY,EAAkBE,I,WCvF7D,IAAMM,EAAa,CACjBC,IAAK,kBAAM,GACXC,OAAQ,SAAAC,GAAI,OAAKA,EAAKP,WACtBQ,UAAW,SAAAD,GAAI,OAAIA,EAAKP,YAGpBS,EAAeC,OAAOC,KAAKP,GAiGlBQ,MA/Ff,SAAalD,GACX,MAA0BC,mBAASD,EAAMmD,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAA4BnD,mBAAS,OAArC,mBAAOoD,EAAP,KAAejC,EAAf,KAOA,SAASmB,EAAoB3B,GAC3B,IAAM0C,EAAeH,EAAMI,KAAI,SAAAV,GAE7B,OAAIjC,IAAOiC,EAAKjC,GAGP,2BAAIiC,GAAX,IAAiBP,WAAYO,EAAKP,YAE7BO,KAETO,EAASE,GAGX,SAASd,EAAW5B,GAClB,IAAM4C,EAAiBL,EAAME,QAAO,SAAAR,GAAI,OAAIjC,IAAOiC,EAAKjC,MACxDwC,EAASI,GAGX,SAASrB,EAASvB,EAAIY,GACpB,IAAMiC,EAAiBN,EAAMI,KAAI,SAAAV,GAE/B,OAAIjC,IAAOiC,EAAKjC,GAEP,2BAAIiC,GAAX,IAAiB3C,KAAMsB,IAElBqB,KAETO,EAASK,GAGX,IAAMC,EAAWP,EAChBE,OAAOX,EAAWW,IAClBE,KAAI,SAAAV,GAAI,OACP,cAACxB,EAAD,CACET,GAAIiC,EAAKjC,GACTV,KAAM2C,EAAK3C,KACXoC,UAAWO,EAAKP,UAEhBC,oBAAqBA,EACrBC,WAAYA,EACZL,SAAUA,GAHLU,EAAKjC,OAOR+C,EAAaZ,EAAaQ,KAAI,SAAArD,GAAI,OACtC,cAAC,EAAD,CAEEA,KAAMA,EACNgB,UAAWhB,IAASmD,EACpBjC,UAAWA,GAHNlB,MAOH0D,EAAgC,IAApBF,EAASG,OAAe,QAAU,OAC9CC,EAAW,UAAMJ,EAASG,OAAf,YAAyBD,EAAzB,cAEXG,EAAiBpC,iBAAO,MACxBqC,EAlFR,SAAqBlD,GACnB,IAAMgB,EAAMH,mBAIZ,OAHAI,qBAAU,WACRD,EAAIE,QAAUlB,KAETgB,EAAIE,QA6EYC,CAAYkB,EAAMU,QAQzC,OANA9B,qBAAU,WACJoB,EAAMU,OAASG,KAAoB,GACrCD,EAAe/B,QAAQS,UAExB,CAACU,EAAMU,OAAQG,IAGhB,sBAAKxD,UAAU,sBAAf,UACE,2CACA,cAAC,EAAD,CAAMD,QAzEV,SAAiBL,GACf,IAAM+D,EAAU,CAAErD,GAAI,QAAUsD,cAAUhE,KAAMA,EAAMoC,WAAW,GACjEc,EAAS,GAAD,mBAAKD,GAAL,CAAYc,QAwElB,qBAAKzD,UAAU,oCAAf,SACGmD,IAEH,oBAAI/C,GAAG,eAAeuD,SAAS,KAAKrC,IAAKiC,EAAzC,SACGD,IAEH,oBACEM,KAAK,OACL5D,UAAU,wCACV,kBAAgB,eAHlB,SAKGkD,QCrGTW,IAASC,OAAO,cAAC,EAAD,CAAKnB,MANR,CACT,CAAEvC,GAAI,SAAUV,KAAM,MAAOoC,WAAW,GACxC,CAAE1B,GAAI,SAAUV,KAAM,QAASoC,WAAW,GAC1C,CAAE1B,GAAI,SAAUV,KAAM,SAAUoC,WAAW,MAGTiC,SAASC,eAAe,W","file":"static/js/main.66e2f644.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Form(props) {\n  const [name, setName] = useState('');\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addTask(name);\n    setName('');\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        placeholder=\"Write a new task...\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  );\n}\n\nexport default Form;","import React from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn toggle-btn\"\n      aria-pressed={props.isPressed}\n      onClick={() => props.setFilter(props.name)}\n    >\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name}</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n}\n\nexport default FilterButton;","import React, { useEffect, useRef, useState } from \"react\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  const wasEditing = usePrevious(isEditing);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = (\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <input \n          id={props.id}\n          className=\"todo-text\"\n          type=\"text\"\n          value={newName}\n          onChange={handleChange}\n          ref={editFieldRef}\n        />\n      </div>\n      <div className=\"btn-group\">\n        <button\n          type=\"button\"\n          className=\"btn todo-cancel\"\n          onClick={() => setEditing(false)}\n        >\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.name}</span>\n        </button>\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </button>\n      </div>\n    </form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        </div>\n        <div className=\"btn-group\">\n          <button\n            type=\"button\"\n            className=\"btn\"\n            onClick={() => setEditing(true)}\n            ref={editButtonRef}\n          >\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn__danger\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n        </div>\n    </div>\n  );\n\n  useEffect(() => {\n    if (isEditing) {\n      editFieldRef.current.focus();\n    } else {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]);\n\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}","/* eslint-disable jsx-a11y/no-redundant-roles */\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [\n    { id: \"todo-0\", name: \"Eat\", completed: true },\n    { id: \"todo-1\", name: \"Sleep\", completed: false },\n    { id: \"todo-2\", name: \"Repeat\", completed: false }\n  ];\n\nReactDOM.render(<App tasks={DATA} />, document.getElementById('root'));\n"],"sourceRoot":""}